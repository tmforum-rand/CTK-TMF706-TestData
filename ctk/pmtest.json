{"info":{"_postman_id":"c281ffed-cd29-424a-9dde-1b115ce98b63","name":"CTK-Test_Data-4.0.0","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"N0","item":[{"name":"Start","event":[{"listen":"prerequest","script":{"exec":["resourceToTest = pm.environment.get(\"resourceToTest\");","","if (resourceToTest.toLowerCase() == \"testdataschema\"){","    postman.setNextRequest(\"Post TestDataSchema\")","}","","if (resourceToTest.toLowerCase() == \"testdatainstance\"){","    postman.setNextRequest(\"Post TestDataInstance\")","}",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"www.example.com","host":["www","example","com"]}},"response":[]}]},{"name":"N1","item":[{"name":"Post TestDataSchema","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","","pm.globals.set('DESCRIPTIONTDS01', instance['description']);","pm.globals.set('HREFTDS01', instance['href']);","pm.globals.set('IDTDS01', instance['id']);","pm.globals.set('VERSIONTDS01', instance['version']);","","pm.test('Body includes value held on description', function () {","  pm.expect(pm.response.text()).to.include(instance['description']);","});","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on version', function () {","  pm.expect(pm.response.text()).to.include(instance['version']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"description\": \"Sample test data schema\",\n  \"testDataSchemaDefinition\": {},\n  \"version\": \"1.2.3\"\n}"},"url":{"raw":"{{Test_Data}}testDataSchema","host":["{{Test_Data}}testDataSchema"]},"description":"This operation creates a TestDataSchema"},"response":[]},{"name":"/TestDataSchema","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDS01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS01');});","            pm.test('id is ' + pm.globals.get(\"IDTDS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS01');});","        }","        if (instance.id == pm.globals.get(\"IDTDS02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS02');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS02');});","            pm.test('id is ' + pm.globals.get(\"IDTDS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDS01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS01');});","            pm.test('id is ' + pm.globals.get(\"IDTDS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS01');});","        }","        if (instance.id == pm.globals.get(\"IDTDS02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS02');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS02');});","            pm.test('id is ' + pm.globals.get(\"IDTDS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataSchema","host":["{{Test_Data}}testDataSchema"]},"description":"This operation search for the created TestDataSchema"},"response":[]},{"name":"/TestDataSchema/{{IDTDS01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDS01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS01');});","            pm.test('id is ' + pm.globals.get(\"IDTDS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS01');});","        }","        if (instance.id == pm.globals.get(\"IDTDS02\")) {","            pm.test('IDTDS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDS01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS01');});","            pm.test('id is ' + pm.globals.get(\"IDTDS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS01');});","        }","        if (instance.id == pm.globals.get(\"IDTDS02\")) {","            pm.test('IDTDS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataSchema/{{IDTDS01}}","host":["{{Test_Data}}testDataSchema"],"path":["{{IDTDS01}}"]},"description":"This operation search for one of the created TestDataSchema"},"response":[]}]},{"name":"N2","item":[{"name":"/TestDataSchema?fields=description","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'description'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataSchema?fields=description","host":["{{Test_Data}}testDataSchema"],"query":[{"key":"fields","value":"description"}]},"description":"This operation filter a TestDataSchema"},"response":[]},{"name":"/TestDataSchema?description={{DESCRIPTIONTDS01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDS01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS01');});","            pm.test('id is ' + pm.globals.get(\"IDTDS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS01');});","        }","        if (instance.id == pm.globals.get(\"IDTDS02\")) {","            pm.test('IDTDS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDS01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS01');});","            pm.test('id is ' + pm.globals.get(\"IDTDS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS01');});","        }","        if (instance.id == pm.globals.get(\"IDTDS02\")) {","            pm.test('IDTDS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataSchema?description={{DESCRIPTIONTDS01}}","host":["{{Test_Data}}testDataSchema"],"query":[{"key":"description","value":"{{DESCRIPTIONTDS01}}"}]},"description":"This operation filter a TestDataSchema"},"response":[]},{"name":"/TestDataSchema?fields=id","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'id'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataSchema?fields=id","host":["{{Test_Data}}testDataSchema"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a TestDataSchema"},"response":[]},{"name":"/TestDataSchema?id={{IDTDS01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDS01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS01');});","            pm.test('id is ' + pm.globals.get(\"IDTDS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS01');});","        }","        if (instance.id == pm.globals.get(\"IDTDS02\")) {","            pm.test('IDTDS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDS01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS01');});","            pm.test('id is ' + pm.globals.get(\"IDTDS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS01');});","        }","        if (instance.id == pm.globals.get(\"IDTDS02\")) {","            pm.test('IDTDS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataSchema?id={{IDTDS01}}","host":["{{Test_Data}}testDataSchema"],"query":[{"key":"id","value":"{{IDTDS01}}"}]},"description":"This operation filter a TestDataSchema"},"response":[]},{"name":"/TestDataSchema?fields=version","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'version'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataSchema?fields=version","host":["{{Test_Data}}testDataSchema"],"query":[{"key":"fields","value":"version"}]},"description":"This operation filter a TestDataSchema"},"response":[]},{"name":"/TestDataSchema?version={{VERSIONTDS01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDS01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS01');});","            pm.test('id is ' + pm.globals.get(\"IDTDS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS01');});","        }","        if (instance.id == pm.globals.get(\"IDTDS02\")) {","            pm.test('IDTDS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testDataSchemaDefinition', 'description', 'href', 'id', 'testDataSchemaDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDS01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDS01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDS01');});","            pm.test('id is ' + pm.globals.get(\"IDTDS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDS01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDS01');});","        }","        if (instance.id == pm.globals.get(\"IDTDS02\")) {","            pm.test('IDTDS02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataSchema?version={{VERSIONTDS01}}","host":["{{Test_Data}}testDataSchema"],"query":[{"key":"version","value":"{{VERSIONTDS01}}"}]},"description":"This operation filter a TestDataSchema"},"response":[]}]},{"name":"E1","item":[{"name":"/TestDataSchema/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","","postman.setNextRequest(null);"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}TestDataSchema/0d7f584b-bcfc-42ee-a630-59f94a533f81","host":["{{Test_Data}}TestDataSchema"],"path":["0d7f584b-bcfc-42ee-a630-59f94a533f81"]},"description":"This operation search for one of the created TestDataSchema"},"response":[]}]},{"name":"N1","item":[{"name":"Post TestDataInstance","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","","pm.globals.set('DESCRIPTIONTDI01', instance['description']);","pm.globals.set('HREFTDI01', instance['href']);","pm.globals.set('IDTDI01', instance['id']);","pm.globals.set('VERSIONTDI01', instance['version']);","","pm.test('Body includes value held on description', function () {","  pm.expect(pm.response.text()).to.include(instance['description']);","});","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on version', function () {","  pm.expect(pm.response.text()).to.include(instance['version']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"description\": \"Input parameters for test case execution\",\n  \"testDataInstanceDefinition\": {},\n  \"version\": \"1.2.3\"\n}"},"url":{"raw":"{{Test_Data}}testDataInstance","host":["{{Test_Data}}testDataInstance"]},"description":"This operation creates a TestDataInstance"},"response":[]},{"name":"/TestDataInstance","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI01');});","            pm.test('id is ' + pm.globals.get(\"IDTDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI01');});","        }","        if (instance.id == pm.globals.get(\"IDTDI02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI02');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI02');});","            pm.test('id is ' + pm.globals.get(\"IDTDI02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI01');});","            pm.test('id is ' + pm.globals.get(\"IDTDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI01');});","        }","        if (instance.id == pm.globals.get(\"IDTDI02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI02');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI02');});","            pm.test('id is ' + pm.globals.get(\"IDTDI02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataInstance","host":["{{Test_Data}}testDataInstance"]},"description":"This operation search for the created TestDataInstance"},"response":[]},{"name":"/TestDataInstance/{{IDTDI01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI01');});","            pm.test('id is ' + pm.globals.get(\"IDTDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI01');});","        }","        if (instance.id == pm.globals.get(\"IDTDI02\")) {","            pm.test('IDTDI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI01');});","            pm.test('id is ' + pm.globals.get(\"IDTDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI01');});","        }","        if (instance.id == pm.globals.get(\"IDTDI02\")) {","            pm.test('IDTDI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataInstance/{{IDTDI01}}","host":["{{Test_Data}}testDataInstance"],"path":["{{IDTDI01}}"]},"description":"This operation search for one of the created TestDataInstance"},"response":[]}]},{"name":"N2","item":[{"name":"/TestDataInstance?fields=description","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'description'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataInstance?fields=description","host":["{{Test_Data}}testDataInstance"],"query":[{"key":"fields","value":"description"}]},"description":"This operation filter a TestDataInstance"},"response":[]},{"name":"/TestDataInstance?description={{DESCRIPTIONTDI01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI01');});","            pm.test('id is ' + pm.globals.get(\"IDTDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI01');});","        }","        if (instance.id == pm.globals.get(\"IDTDI02\")) {","            pm.test('IDTDI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI01');});","            pm.test('id is ' + pm.globals.get(\"IDTDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI01');});","        }","        if (instance.id == pm.globals.get(\"IDTDI02\")) {","            pm.test('IDTDI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataInstance?description={{DESCRIPTIONTDI01}}","host":["{{Test_Data}}testDataInstance"],"query":[{"key":"description","value":"{{DESCRIPTIONTDI01}}"}]},"description":"This operation filter a TestDataInstance"},"response":[]},{"name":"/TestDataInstance?fields=id","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataInstance?fields=id","host":["{{Test_Data}}testDataInstance"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a TestDataInstance"},"response":[]},{"name":"/TestDataInstance?id={{IDTDI01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI01');});","            pm.test('id is ' + pm.globals.get(\"IDTDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI01');});","        }","        if (instance.id == pm.globals.get(\"IDTDI02\")) {","            pm.test('IDTDI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI01');});","            pm.test('id is ' + pm.globals.get(\"IDTDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI01');});","        }","        if (instance.id == pm.globals.get(\"IDTDI02\")) {","            pm.test('IDTDI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataInstance?id={{IDTDI01}}","host":["{{Test_Data}}testDataInstance"],"query":[{"key":"id","value":"{{IDTDI01}}"}]},"description":"This operation filter a TestDataInstance"},"response":[]},{"name":"/TestDataInstance?fields=version","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'version'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataInstance?fields=version","host":["{{Test_Data}}testDataInstance"],"query":[{"key":"fields","value":"version"}]},"description":"This operation filter a TestDataInstance"},"response":[]},{"name":"/TestDataInstance?version={{VERSIONTDI01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI01');});","            pm.test('id is ' + pm.globals.get(\"IDTDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI01');});","        }","        if (instance.id == pm.globals.get(\"IDTDI02\")) {","            pm.test('IDTDI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testDataInstanceDefinition', 'description', 'href', 'id', 'testDataInstanceDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTDI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTDI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTDI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTDI01');});","            pm.test('id is ' + pm.globals.get(\"IDTDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTDI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTDI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTDI01');});","        }","        if (instance.id == pm.globals.get(\"IDTDI02\")) {","            pm.test('IDTDI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}testDataInstance?version={{VERSIONTDI01}}","host":["{{Test_Data}}testDataInstance"],"query":[{"key":"version","value":"{{VERSIONTDI01}}"}]},"description":"This operation filter a TestDataInstance"},"response":[]}]},{"name":"E1","item":[{"name":"/TestDataInstance/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","","postman.setNextRequest(null);"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Data}}TestDataInstance/dd071760-0b0f-46d7-b362-4cdbbcaaec60","host":["{{Test_Data}}TestDataInstance"],"path":["dd071760-0b0f-46d7-b362-4cdbbcaaec60"]},"description":"This operation search for one of the created TestDataInstance"},"response":[]}]}]}